# -*- coding: utf-8 -*-
"""trialF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qCFKd37Jkxum2HBUFpIuopEJ9O2gub6K
"""

import pandas as pd
import numpy as np

df=pd.read_csv('/content/ProjectDataset.csv' , encoding='ISO-8859-1')
df.head(5)

df.shape

"""Data Cleaning"""

df.info()

df.drop(columns=['Unnamed: 2','Unnamed: 3','Unnamed: 4'],inplace=True)

df.head()

df.rename(columns={'v1' : 'target' , 'v2' : 'text'},inplace=True)

df.head()

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()

df['target'] = encoder.fit_transform(df['target'])

df.head()

# checking is there any missing value or not?
df.isnull().sum()

# checking is there any duplicate value or not?
df.duplicated().sum()

df = df.drop_duplicates(keep='first')

df.duplicated().sum()

df.shape

"""EDA - Exploratory data analysis"""

df['target'].value_counts()

import matplotlib.pyplot as plt
plt.pie(df['target'].value_counts(), labels=['ham','spam'], autopct="%0.2f")
plt.show()
#data is imbalanced here 87.37 ham and 12.63 spam

pip install nltk

import nltk

nltk.download('punkt')

df['num_charactors'] = df['text'].apply(len)

df.head()

df['num_words'] = df['text'].apply(lambda x:len(nltk.word_tokenize(x)))

df.head()

df['num_sent'] = df['text'].apply(lambda x:len(nltk.sent_tokenize(x)))

df.head()

df[['num_charactors','num_words','num_sent']].describe()

#for ham
df[df['target'] == 0][['num_charactors','num_words','num_sent']].describe()

#for spam
df[df['target'] == 1][['num_charactors','num_words','num_sent']].describe()

import seaborn as sns

plt.figure(figsize=(12,6))
sns.histplot(df[df['target'] == 0]['num_charactors'])
sns.histplot(df[df['target'] == 1]['num_charactors'],color='red')

plt.figure(figsize=(12,6))
sns.histplot(df[df['target'] == 0]['num_words'])
sns.histplot(df[df['target'] == 1]['num_words'],color='red')

sns.pairplot(df,hue='target')

sns.heatmap(df.corr(),annot=True)

"""Data preprocessing"""

from nltk.corpus import stopwords
nltk.download('stopwords')
stop_word = stopwords.words('english')

import string
string.punctuation

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
ps.stem('walking') #example

def transform_text(text):
  text = text.lower()
  text = nltk.word_tokenize(text)

  y = []
  for i in text:
    if i.isalnum():
      y.append(i)

  text = y[:]
  y.clear()

  for i in text:
    if i not in stopwords.words('english') and i not in string.punctuation:
      y.append(i)

  text = y[:]
  y.clear()

  for i in text:
    y.append(ps.stem(i))

  return " ".join(y)

transform_text('Hola My Name i#s NIJ And ?? @mail Dancing Coding () what you are doing')

#now we apply 'transform_text' function to our 'text' column

df['text'].apply(transform_text)
df['transformed_text'] = df['text'].apply(transform_text)

df.head()

from wordcloud import WordCloud
wc = WordCloud(width=500,height=500,min_font_size=10,background_color='white')

spam_wc = wc.generate(df[df['target'] == 1]['transformed_text'].str.cat(sep=""))

plt.figure(figsize=(15,6))
plt.imshow(spam_wc)

ham_wc = wc.generate(df[df['target'] == 0]['transformed_text'].str.cat(sep=""))

plt.figure(figsize=(15,6))
plt.imshow(ham_wc)

spam_corpus = []
df[df['target'] == 1]['transformed_text'].tolist()
for msg in df[df['target'] == 1]['transformed_text'].tolist():
  for word in msg.split():
    spam_corpus.append(word)

len(spam_corpus)

#for spam
from collections import Counter
Counter(spam_corpus).most_common(30)

#for ham
ham_corpus = []
df[df['target'] == 0]['transformed_text'].tolist()
for msg in df[df['target'] == 0]['transformed_text'].tolist():
  for word in msg.split():
    ham_corpus.append(word)

len(ham_corpus)

from collections import Counter
Counter(ham_corpus).most_common(30)

"""Model Building"""

!pip install sklearn

import sklearn
from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer #i will use Tfidf instead of Countvectorizer for more accuracy and improvement
cv = CountVectorizer()
Tfidf = TfidfVectorizer()

x = Tfidf.fit_transform(df['transformed_text']).toarray()

x.shape

y = df['target'].values

y

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=2)

from sklearn.naive_bayes import GaussianNB,MultinomialNB,BernoulliNB
from sklearn.metrics import accuracy_score,confusion_matrix,precision_score

gnb = GaussianNB()
mnb = MultinomialNB()
bnb = BernoulliNB()

gnb.fit(x_train,y_train)
y_pred1 = gnb.predict(x_test)
print(accuracy_score(y_test,y_pred1))
print(confusion_matrix(y_test,y_pred1))
print(precision_score(y_test,y_pred1))
#with the CountVectorizer---->accuracy_score=0.88,precision_score=0.53
#with the Tfidf---->accuracy_score=0.87,precision_score=0.52

mnb.fit(x_train,y_train)
y_pred2 = mnb.predict(x_test)
print(accuracy_score(y_test,y_pred2))
print(confusion_matrix(y_test,y_pred2))
print(precision_score(y_test,y_pred2))
#with the CountVectorizer---->accuracy_score=0.96,precision_score=0.83
#with the Tfidf---->accuracy_score=0.95,precision_score=1

bnb.fit(x_train,y_train)
y_pred3 = bnb.predict(x_test)
print(accuracy_score(y_test,y_pred3))
print(confusion_matrix(y_test,y_pred3))
print(precision_score(y_test,y_pred3))
#with the CountVectorizer---->accuracy_score=0.97,precision_score=0.97
#with the Tfidf---->accuracy_score=0.97,precision_score=0.97

#i will select Tfidf-----> mnb

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.naive_bayes import MultinomialNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import BaggingClassifier
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.ensemble import GradientBoostingClassifier
from xgboost import XGBClassifier

svc = SVC(kernel='sigmoid', gamma=1.0)
knc = KNeighborsClassifier()
mnb = MultinomialNB()
dtc = DecisionTreeClassifier(max_depth=5)
lrc = LogisticRegression(solver='liblinear', penalty='l1')
rfc = RandomForestClassifier(n_estimators=50, random_state=2)
abc = AdaBoostClassifier(n_estimators=50, random_state=2)
bc = BaggingClassifier(n_estimators=50, random_state=2)
etc = ExtraTreesClassifier(n_estimators=50, random_state=2)
gbdt = GradientBoostingClassifier(n_estimators=50, random_state=2)
xgb = XGBClassifier(n_estimators=50, random_state=2)

clfs = {
    'SVC' : svc,
    'KN' : knc,
    'NB' : mnb,
    'DT' : dtc,
    'LR' : lrc,
    'RF' : rfc,
    'ADABOOST' : abc,
    'BGC' : bc,
    'ETC' : etc,
    'GBDT' : gbdt,
    'XGB' : xgb
}

def train_classifier(clfs,x_train,y_train,x_test,y_test):
  clfs.fit(x_train,y_train)
  y_pred = clfs.predict(x_test)
  accuracy = accuracy_score(y_test,y_pred)
  precision = precision_score(y_test,y_pred)
  return accuracy,precision

train_classifier(rfc,x_train,y_train,x_test,y_test)

train_classifier(mnb,x_train,y_train,x_test,y_test)

train_classifier(knc,x_train,y_train,x_test,y_test)

#train_classifier(xgb,x_train,y_train,x_test,y_test)

#train_classifier(gbdt,x_train,y_train,x_test,y_test)

accuracy_scores = []
precision_scores = []

for name,clfs in clfs.items():
  current_accuracy,current_precision = train_classifier(clfs,x_train,y_train,x_test,y_test)

  print("for ",name)
  print("Accuracy - ",current_accuracy)
  print("pricision - ",current_precision)

  accuracy_scores.append(current_accuracy)
  precision_scores.append(current_precision)

performance_df = pd.DataFrame({'Algorithm':clfs.keys(),'Accuracy':accuracy_scores,'Precision':precision_scores}).sort_values(['Precision','Accuracy'],ascending=False)

performance_df

"""Pipeline"""

import pickle
pickle.dump(Tfidf,open('vectorizer.pkl', 'wb'))
pickle.dump(mnb,open('model.pkl', 'wb'))

